#include "main.h"

void pinta3D(int vX[],int vY[],int vZ[],int numP,Uint32 color)
{
	int nodos,j,swap,vectorX[20],vectorY[20],vectorZ[20];
	for(int i=0;i<numP;i++)
	{
	 		vectorX[i]=vX[i];
	 		vectorY[i]=vY[i];
	 		vectorZ[i]=vZ[i];
	 		aplicaMatriz(&vectorX[i],&vectorY[i],&vectorZ[i]);
	}
	
	int dx=vX[0]-vectorX[0],dy=vY[0]-vectorY[0],dz=vZ[0]-vectorZ[0];
	printf("dz:%d=vZ:%d-vectorZ:%d\n",dz,vZ[0],vectorZ[0]);
	for(int i=0;i<numP;i++)
	{
	 		vectorX[i]+=dx+(int)(Matriz[0][3]);
	 		vectorY[i]+=dy+(int)(Matriz[1][3]);
	 		vectorZ[i]+=dz+(int)(Matriz[2][3]);
	}
	for(int i=0;i<numP;i++)
	{
		breseColor(vectorX[i]+vectorZ[i],vectorY[i]+vectorZ[i],vectorX[(i+1)%numP]+vectorZ[i],vectorY[(i+1)%numP]+vectorZ[i],0xfffffff);
		breseColor(vectorX[i],vectorY[i],vectorX[(i+1)%numP],vectorY[(i+1)%numP],color);
		breseColor(vectorX[i],vectorY[i],vectorX[i]+vectorZ[i],vectorY[i]+vectorZ[i],color);
		
	}
}

void pintaPoligono3D(int vX[],int vY[],int vZ[],int numP,Uint32 color)
{
	int nodosX[numP];
	int i,nodos,j,swap,vectorX[50],vectorY[50],vectorZ[50];
	for(int i=0;i<numP;i++)
	{
	 		vectorX[i]=vX[i];
	 		vectorY[i]=vY[i];
	 		vectorZ[i]=vZ[i];
	 		aplicaMatriz(&vectorX[i],&vectorY[i],&vectorZ[i]);
	}
	int dx=vX[0]-vectorX[0],dy=vY[0]-vectorY[0],dz=vZ[0]-vectorZ[0];
	
	for(int i=0;i<numP;i++)
	{
	 		vectorX[i]+=dx+(int)(Matriz[0][3]);
	 		vectorY[i]+=dy+(int)(Matriz[1][3]);
	 		vectorZ[i]+=dz+(int)(Matriz[2][3]);
	}
	
	for(int y=1;y<winY;y++)
	{
		j=numP-1;
		nodos=0;
		for(i=0;i<numP;i++)
		{
			if (vectorY[i]<y && vectorY[j]>=y
              ||vectorY[j]<y && vectorY[i]>=y)
              {
    			nodosX[nodos++]=(int)(vectorX[i]+(y-vectorY[i])*(vectorX[j]-vectorX[i])/(vectorY[j]-vectorY[i])); 
		      }	
		   j=i;
		}
	
		i=0;
	
		while (i<nodos-1)
		{
          if (nodosX[i]>nodosX[i+1])
	      {
	        swap=nodosX[i];
	 		nodosX[i]=nodosX[i+1];
		    nodosX[i+1]=swap;
	        if (i)
	         i--;
	      }
          else
           i++;
        }

        for(i=0;i<nodos;i++)
        {
		  if(nodosX[i]>=winX)
		   nodosX[i]=winX;
		  else if(nodosX[i]<0)
		   nodosX[i]=0;
        }
  
        for (i=0; i<nodos-1; i+=2)
        {
	    	for (j=nodosX[i]; j<nodosX[i+1]; j++) 
	    	{
	        	putpixel(j,y,color);
         	    putpixel(j+vectorZ[i],y+vectorZ[i],color);
            }
        }
    }	
}


void dibujaFigura(Punto f[],int p)
{
     for(int i=0;i<p;i++)
           brese(f[i].x,f[i].y,f[(i+1)%p].x,f[(i+1)%p].y);
}

void pintaPoligono(int vX[],int vY[],int numP,Uint32 color)
{
	int nodosX[numP];
	int i,nodos,j,swap,vectorX[50],vectorY[50];
	int z=0;
	for(int i=0;i<numP;i++)
	{
	 		vectorX[i]=vX[i];
	 		vectorY[i]=vY[i];
	 		aplicaMatriz(&vectorX[i],&vectorY[i],&z);
	}
	int dx=vX[0]-vectorX[0],dy=vY[0]-vectorY[0];
	
	for(int i=0;i<numP;i++)
	{
	 		vectorX[i]+=dx+(int)(Matriz[0][3]);
	 		vectorY[i]+=dy+(int)(Matriz[1][3]);
	}
			
	for(int y=1;y<winY;y++)
	{
		j=numP-1;
		nodos=0;
		for(i=0;i<numP;i++)
		{
			if (vectorY[i]<y && vectorY[j]>=y
              ||vectorY[j]<y && vectorY[i]>=y)
              {
    			nodosX[nodos++]=(int)(vectorX[i]+(y-vectorY[i])*(vectorX[j]-vectorX[i])/(vectorY[j]-vectorY[i])); 
		      }	
		   j=i;
		}
	
		i=0;
	
		while (i<nodos-1)
		{
          if (nodosX[i]>nodosX[i+1])
	      {
	        swap=nodosX[i];
	 		nodosX[i]=nodosX[i+1];
		    nodosX[i+1]=swap;
	        if (i)
	         i--;
	      }
          else
           i++;
        }

        for(i=0;i<nodos;i++)
        {
		  if(nodosX[i]>=winX)
		   nodosX[i]=winX;
		  else if(nodosX[i]<0)
		   nodosX[i]=0;
        }
  
        for (i=0; i<nodos-1; i+=2)
        {
	    	for (j=nodosX[i]; j<nodosX[i+1]; j++) 
	        	putpixel(j,y,color);
        }
    }	
}

void breseColor(int x0,int y0,int x1,int y1,Uint32 c)
{
  int x, y, dx, dy, p, incE, incNE, stepx, stepy;
  dx = (x1 - x0);
  dy = (y1 - y0);
  if (dy < 0)
  {
    dy = -dy;
	stepy = -1; 
  }
  else
    stepy = 1;
  if (dx < 0)
  {
    dx = -dx; 
	stepx = -1; 
  }
  else 
    stepx = 1;
  x = x0;
  y = y0;
  putpixel(x0,y0,c);
  if(dx>dy)
  {
    p = 2*dy - dx;
    incE = 2*dy;
    incNE = 2*(dy-dx);
    while (x != x1){
      x = x + stepx;
      if (p < 0){
        p = p + incE;
      }
      else {
        y = y + stepy;
        p = p + incNE;
      }
      putpixel(x,y,c);
    }
  }
  else
  {
    p = 2*dx - dy;
    incE = 2*dx;
    incNE = 2*(dx-dy);
    while (y != y1)
	{
      y = y + stepy;
      if (p < 0)
        p = p + incE;
      else 
	  {
        x = x + stepx;
        p = p + incNE;
      }
      putpixel(x,y,c);
    }
  }
}

void brese(int x0,int y0,int x1,int y1)
{
  Uint32 c=SDL_MapRGB(screen->format,255,0,0);
  int x, y, dx, dy, p, incE, incNE, stepx, stepy;
  dx = (x1 - x0);
  dy = (y1 - y0);
  if (dy < 0)
  {
    dy = -dy;
	stepy = -1; 
  }
  else
    stepy = 1;
  if (dx < 0)
  {
    dx = -dx; 
	stepx = -1; 
  }
  else 
    stepx = 1;
  x = x0;
  y = y0;
  putpixel(x0,y0,c);
  if(dx>dy)
  {
    p = 2*dy - dx;
    incE = 2*dy;
    incNE = 2*(dy-dx);
    while (x != x1){
      x = x + stepx;
      if (p < 0){
        p = p + incE;
      }
      else {
        y = y + stepy;
        p = p + incNE;
      }
      putpixel(x,y,c);
    }
  }
  else
  {
    p = 2*dx - dy;
    incE = 2*dx;
    incNE = 2*(dx-dy);
    while (y != y1)
	{
      y = y + stepy;
      if (p < 0)
        p = p + incE;
      else 
	  {
        x = x + stepx;
        p = p + incNE;
      }
      putpixel(x,y,c);
    }
  }
}

void linea(int x1,int y1,int x2,int y2,Uint32 c)
{
     int x,y,b;
     int xm,ym;
     float m;
     
     m = (float)(y2-y1) / (float)(x2-x1);
     if(abs((y2-y1))<=abs((x2-x1)))
     {
	  b= y1 -(int)(m*(float)x1);
      for(x=x1;x<=x2;x++)
	  {
       y=(int)(m*(float)x)+b;
       putpixel(x,y,c);
      }
      for(x=x1;x>=x2;x--)
	  {
       y=(int)(m*(float)x)+b;
       putpixel(x,y,c);
	  }
     }
     else
     {

	  b= y1 -(int)(m*(float)x1);
	  if(x1==x2)
	  {
			for(y=y1;y<=y2;y++)
	        {

	 	      	x=(int)((y-b)/m)+x1;
    		   putpixel(x,y,c);
      		}
      		for(y=y1;y>=y2;y--)
	 		 {
			   x=(int)((y-b)/m)+x1;
       			putpixel(x,y,c);
			  }	
		}
	else
	{
      for(y=y1;y<=y2;y++)
	  {

       x=(int)((y-b)/m);
       putpixel(x,y,c);
      }
      for(y=y1;y>=y2;y--)
	  {
	   x=(int)((y-b)/m);
       putpixel(x,y,c);
	  }	
	}
	 }
}

void arco(int xp,int yp,int radio,int t1,int t2,Uint32 color)
{
    int x,xx,y,yy,t;
    for(int i=t1;i<=t2;i+=2)
	{
              x= (int)(radio*cos( (float)i/57.29 ) );
              y= (int)(radio*sin( (float)i/57.29) ) ;
              xx= (int)(radio*cos( (float)t/57.29 ) );
              yy= (int)(radio*sin( (float)t/57.29) ) ;
              breseColor(x+xp,y+yp,xx+xp,yy+yp,color);
              t=i;
    }
}
void espiral(int x,int y,double radio,int angI,int vueltas,Uint32 color)
{   
    int x1,x2,y1,y2,t=angI;
    
    for(int angulo=angI;angulo<vueltas*360+angI;angulo+=2)
    {
            x1= (int)(radio*cos( (float)angulo/57.29 ) );
            y1= (int)(radio*sin( (float)angulo/57.29) ) ;
            x2= (int)(radio*cos( (float)t/57.29 ) );
            y2= (int)(radio*sin( (float)t/57.29) ) ;

            breseColor(x+x1,y+y1,x+x2,y+y2,color);
            t=angulo;
            radio+=0.06;
    }
}

void circulo(int x,int y,int radio,Uint32 color)
{
    int x1,x2,y1,y2,t=0;
    for(int i=0;i<360;i+=2)
    {
            x1= (int)(radio*cos( (float)i/57.29 ) );
            y1= (int)(radio*sin( (float)i/57.29) ) ;
            putpixel(x+x1,y+y1,color);
    }
}
